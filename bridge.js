// Generated by CoffeeScript 1.9.3

/**
 * Android SDK initialization
 */
var androidSDKInitialization, androidSDKconfig, base, has, init, iosSDKConig, iosSDKInitialization, limitDecision, sdk, searchJoin, systemConfirm, ua, versionConvert, webSDKConfig;

androidSDKInitialization = function() {

  /**
   * 初始化android`s app js sdk
   * @param  {Function} callback [description]
   * @return {[type]}            [description]
   */
  var connectWebViewJavascriptBridge;
  connectWebViewJavascriptBridge = function(callback) {
    if (window.WebViewJavascriptBridge) {
      return callback(WebViewJavascriptBridge);
    } else {
      return document.addEventListener('WebViewJavascriptBridgeReady', function() {
        return callback(WebViewJavascriptBridge);
      }, false);
    }
  };
  return connectWebViewJavascriptBridge(function(bridge) {
    return bridge.init(function(message, responseCallback) {
      var data;
      console.log('JS got a message', message);
      data = {
        'Javascript Responds': 'Wee!'
      };
      console.log('JS responding with', data);
      return responseCallback(data);
    });
  });
};


/**
 * ios SDK initialization
 */

iosSDKInitialization = function() {
  return false;
};


/**
 * sdk数据存在列表
 * @type {Object}
 */

ua = navigator.userAgent;

iosSDKConig = {};

androidSDKconfig = {
  "360around": {
    getVersion: function() {
      var data;
      data = ua.match(/360around \((.*)\)$/);
      if (data) {
        return data[1];
      } else {
        return '';
      }
    },
    sdk: {
      login: {
        '*': ['goLogin']
      },
      qifutong: {
        '>=1.3.0.1001': ['pay']
      }
    }
  }
};

webSDKConfig = {
  login: {
    '*': "http://i.360.cn/login/wap"
  }
};


/**
 * 客户端系统判定
 * @return {type} [description]
 */

systemConfirm = function() {
  if (ua.indexOf('iPhone') > -1) {
    iosSDKInitialization();
    return 'ios';
  }
  if (ua.indexOf('Android') > -1) {
    androidSDKInitialization();
    return 'android';
  }
  return 'other';
};


/**
 * 版本数据计算
 * @param  {String} _ver 需要换算的版本号
 * @return {Number}      版本换算结果
 */

versionConvert = function(_ver) {
  var _tmp_arr;
  if (!_ver) {
    return 0;
  }
  _tmp_arr = _ver.split('.');
  return ((_tmp_arr[0] - 1) * 10 * 10 * 10000) + (_tmp_arr[1] * 10 * 10000) + (_tmp_arr[2] * 10000) + _tmp_arr[3] - 1000;
};


/**
 * 拼接成search数据
 * @param  {Object} json 需要拼接的数据
 * @return {String}      拼接结果
 */

searchJoin = function(json) {
  var k, search, v;
  if (toString.call(json) !== '[object Object]') {
    return '';
  }
  search = [];
  for (k in json) {
    v = json[k];
    search.push(k + "=" + v);
  }
  if (search.length) {
    return "?" + (search.join('&'));
  } else {
    return '';
  }
};


/**
 * SDK版本限制判断
 * @param  {String} version 需要换算的版本号
 * @return {Boolean}         执行结果
 */

limitDecision = function(limitVersion) {
  var currectVersion, limitMap, sign, temp;
  currectVersion = base.version;
  temp = /^((\*|~|\^|>|<)=?)?([1-9]+(\.[0-9]+)+)?$/.exec(limitVersion);
  sign = temp[1];
  limitVersion = temp[3];
  limitMap = {

    /*
      不匹配版本，通用
     */
    '*': function() {
      return true;
    },

    /*
      匹配版本满足一级和二级版本号相同，其余大于该版本，包括该版本
     */
    '~': function() {
      var currectArray, limitArray;
      currectArray = currectVersion.split('.');
      limitArray = limitVersion.split('.');
      if (currectArray[0] === limitArray[0] && currectArray[1] === limitArray[1] && currectArray[2] >= limitArray[2]) {
        return versionConvert(currectVersion) >= versionConvert(limitVersion);
      }
      return false;
    },

    /*
      匹配版本满足一级版本号相同，其余大于该版本，包括该版本
     */
    '^': function() {
      var currectArray, limitArray;
      currectArray = currectVersion.split('.');
      limitArray = limitVersion.split('.');
      if (currectArray[0] === limitArray[0] && currectArray[1] >= limitArray[1]) {
        return versionConvert(currectVersion) >= versionConvert(limitVersion);
      }
      return false;
    },

    /*
      匹配大于该版本的应用
     */
    '>': function() {
      return versionConvert(currectVersion) > versionConvert(limitVersion);
    },

    /*
      匹配大于该版本的应用，包括该版本
     */
    '>=': function() {
      return versionConvert(currectVersion) >= versionConvert(limitVersion);
    },

    /*
      匹配小于该版本的应用，包括该版本
     */
    '<=': function() {
      return versionConvert(currectVersion) <= versionConvert(limitVersion);
    },

    /*
      匹配小于该版本的应用
     */
    '<': function() {
      return versionConvert(currectVersion) < versionConvert(limitVersion);
    }
  };
  if (sign) {
    return limitMap[sign]();
  } else {
    return versionConvert(currectVersion) === versionConvert(limitVersion);
  }
};


/**
 * 调用app`s sdk
 * @param  {String} method 需要调用的app方法
 * @return {Boolean}       调用结果
 */

sdk = function(method, data, callback) {

  /*
    app对应的sdk配置缺失
   */
  var limitVersion, methods, search;
  if (!has(method)) {
    return console.log(base.app + "sdk没有此功能提供");
  }
  methods = base.methods[method];

  /*
    遍历方法配置
   */
  for (limitVersion in methods) {
    method = methods[limitVersion];
    if (limitDecision(limitVersion)) {

      /*
        sdk为字符串，web或者sdk通过log通信
       */
      if (typeof method === 'string') {
        if (0 === method.indexOf('http')) {
          search = searchJoin(data);
          location.href = method + searchJoin(data);
        } else {
          console.log(method + searchJoin(data));
        }
        return true;
      }

      /*
        调用app注入的bridge调用appView
       */
      if ("[object Array]" === toString.call(method)) {
        if (window.WebViewJavascriptBridge) {
          method.push(data, callback);
          WebViewJavascriptBridge.callHandler.apply(WebViewJavascriptBridge, method);
        } else {
          alert("无法调用native-" + n + "-bridge是否加载");
        }
        return true;
      }

      /*
        为函数的时候执行函数，传入数据
       */
      if (typeof method === 'function') {
        method(data);
        return true;
      }
    }
  }
  return false;
};


/**
 * 匹配在appMap配置内是否有sdk存在
 * @param  {String} sdkName 需要校验的sdk名
 * @return {Boolean}        true sdk存在并且版本匹配 false sdk不存在或存在但是版本不匹配
 */

has = function(sdkName) {
  return sdkName in base.methods;
};


/**
 * 初始化
 * @return {[type]} [description]
 */

init = function() {
  var app, fn, opt, temp;
  temp = {};
  for (app in appMap) {
    opt = appMap[app];
    fn = opt.isMatch;
    if (typeof fn === 'function' && fn()) {
      temp.app = app;
      break;
    }
    if (typeof fn === 'boolean' && fn) {
      temp.app = app;
      break;
    }
  }
  if (temp.app) {
    temp.version = appMap[temp.app]['getVersion']();
    temp.system = systemConfirm();
    temp.methods = appMap[temp.app][temp.system];
  } else {
    temp.app = 'web';
    temp.methods = appMap.web;
  }
  if (!temp.methods) {
    temp.methods = {};
    console.warn(temp.app + "没有" + (temp.system || '') + "配置");
  }
  return temp;
};

base = exports.base = init();

exports.sdk = sdk;

exports.has = has;

exports.gtVersion = function(v) {
  return versionConvert(base.version) >= versionConvert(v);
};

exports.ltVersion = function(v) {
  return versionConvert(base.version) < versionConvert(v);
};
